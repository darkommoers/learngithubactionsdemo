name: AutoCheck

on:
  schedule:
    - cron:  '04 4,16 * * *'
  workflow_dispatch:

jobs:
  autocheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Test Automatic check and push version
        env:
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          CONTENT_PATH: "src/caddy/caddy.version"
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            let current_caddy;
            let latest_caddy;
            let arrdate = () => {
              let date = new Date();
              let curTime = `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()} ${date.getHours().toString().padStart(2,"0")}:${date.getMinutes().toString().padStart(2,"0")}:${date.getSeconds().toString().padStart(2,"0")} ${date.getDay()}`;
              return curTime;
            }
          
            let result_sha = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: `${{ env.CONTENT_PATH }}`
            })
            // console.log(arrdate(),result_sha)
            // console.log(arrdate(),result_sha.data.sha)
            // console.log(arrdate(),result_sha.data.content)
            // console.log(arrdate(),atob(result_sha.data.content).replace(/[\r\n]/g,""))
          
            // await fetch(`https://api.github.com/repos/${{ github.repository }}/contents/${{ env.CONTENT_PATH }}`, {headers: {"Authorization": `Bearer ${{ env.GH_TOKEN }}`}})
            // .then(response => response.json())
            // .then(data => {current_caddy = data});
          
            await fetch('https://api.github.com/repos/caddyserver/caddy/releases')
            .then(response => response.json())
            .then(data => {latest_caddy = data});
          
            current_caddy = atob(result_sha.data.content).replace(/[\r\n]/g,"");
          
            // current_caddy = atob(current_caddy.content).replace(/[\r\n]/g,"");
            latest_caddy = latest_caddy[0].tag_name;
          
            console.log(arrdate(),`Current version: ${current_caddy}`);
            console.log(arrdate(),`Latest version: ${latest_caddy}`);
          
            if (`${current_caddy}` != `${latest_caddy}`) {
              console.log(arrdate(),`Current version: ${current_caddy}, Latest version: ${latest_caddy}, Start Getting......`);
          
              let result = await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: `${{ env.CONTENT_PATH }}`,
                message: `Update to ${latest_caddy}`,
                sha: `${result_sha.data.sha}`,
                content: btoa(`${latest_caddy}`)
              })
              // console.log(arrdate(),result);
              console.log(arrdate(),result.data.commit.message);
          
              console.log(arrdate(),`Get caddy latest version Complete.`);
            } else {
              console.log(arrdate(),`Current version: ${current_caddy}, Latest version: ${latest_caddy}, No need to get.`);
            }
